# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_oscillator_bursting', [dirname(__file__)])
        except ImportError:
            import _oscillator_bursting
            return _oscillator_bursting
        if fp is not None:
            try:
                _mod = imp.load_module('_oscillator_bursting', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _oscillator_bursting = swig_import_helper()
    del swig_import_helper
else:
    import _oscillator_bursting
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def ensem(t, y, ydot):
    return _oscillator_bursting.ensem(t, y, ydot)
ensem = _oscillator_bursting.ensem

def Calc_mfx(y):
    return _oscillator_bursting.Calc_mfx(y)
Calc_mfx = _oscillator_bursting.Calc_mfx

def Calc_mfy(y):
    return _oscillator_bursting.Calc_mfy(y)
Calc_mfy = _oscillator_bursting.Calc_mfy

def Calc_mfz(y):
    return _oscillator_bursting.Calc_mfz(y)
Calc_mfz = _oscillator_bursting.Calc_mfz

def Make_shift(y, shift):
    return _oscillator_bursting.Make_shift(y, shift)
Make_shift = _oscillator_bursting.Make_shift

def return_to_sync(y, y_copy):
    return _oscillator_bursting.return_to_sync(y, y_copy)
return_to_sync = _oscillator_bursting.return_to_sync

def create_sync_copy(y):
    return _oscillator_bursting.create_sync_copy(y)
create_sync_copy = _oscillator_bursting.create_sync_copy

def release_memory(y_copy):
    return _oscillator_bursting.release_memory(y_copy)
release_memory = _oscillator_bursting.release_memory

def Calc_state(y, idx):
    return _oscillator_bursting.Calc_state(y, idx)
Calc_state = _oscillator_bursting.Calc_state

def Make_step2(y):
    return _oscillator_bursting.Make_step2(y)
Make_step2 = _oscillator_bursting.Make_step2

def Calc_std(history, start_idx, end_idx):
    return _oscillator_bursting.Calc_std(history, start_idx, end_idx)
Calc_std = _oscillator_bursting.Calc_std

def Show_history(history, idx):
    return _oscillator_bursting.Show_history(history, idx)
Show_history = _oscillator_bursting.Show_history

def Phase_state(phase_, y, history, phase_oscillator, hist_length):
    return _oscillator_bursting.Phase_state(phase_, y, history, phase_oscillator, hist_length)
Phase_state = _oscillator_bursting.Phase_state

def Make_step3(y, history, phase_oscillator, nsteps, hist_length):
    return _oscillator_bursting.Make_step3(y, history, phase_oscillator, nsteps, hist_length)
Make_step3 = _oscillator_bursting.Make_step3

def Calc_angle(history, hist_length):
    return _oscillator_bursting.Calc_angle(history, hist_length)
Calc_angle = _oscillator_bursting.Calc_angle

def Calc_all_angles(history, phases, hist_length):
    return _oscillator_bursting.Calc_all_angles(history, phases, hist_length)
Calc_all_angles = _oscillator_bursting.Calc_all_angles

def Show_phase(phases, idx):
    return _oscillator_bursting.Show_phase(phases, idx)
Show_phase = _oscillator_bursting.Show_phase

def init_history(hist_length):
    return _oscillator_bursting.init_history(hist_length)
init_history = _oscillator_bursting.init_history

def init(nosc_, epsilon_, frrms_, sdim_):
    return _oscillator_bursting.init(nosc_, epsilon_, frrms_, sdim_)
init = _oscillator_bursting.init

def init_phase_oscillator(hist_length):
    return _oscillator_bursting.init_phase_oscillator(hist_length)
init_phase_oscillator = _oscillator_bursting.init_phase_oscillator

def Make_biphasic_step(y, history, phase_oscillator, width_p_, gap_, width_n_, pos_Aampl, neg_Aampl, skip_steps, hist_length):
    return _oscillator_bursting.Make_biphasic_step(y, history, phase_oscillator, width_p_, gap_, width_n_, pos_Aampl, neg_Aampl, skip_steps, hist_length)
Make_biphasic_step = _oscillator_bursting.Make_biphasic_step

def Return_end_idx(history, hist_length):
    return _oscillator_bursting.Return_end_idx(history, hist_length)
Return_end_idx = _oscillator_bursting.Return_end_idx

def Calc_oscillator(history, phase_oscillator, hist_length):
    return _oscillator_bursting.Calc_oscillator(history, phase_oscillator, hist_length)
Calc_oscillator = _oscillator_bursting.Calc_oscillator

def Calc_angle2(phase_oscillator, idx):
    return _oscillator_bursting.Calc_angle2(phase_oscillator, idx)
Calc_angle2 = _oscillator_bursting.Calc_angle2

def Clear_phase_oscillator(phase_oscillator, hist_length):
    return _oscillator_bursting.Clear_phase_oscillator(phase_oscillator, hist_length)
Clear_phase_oscillator = _oscillator_bursting.Clear_phase_oscillator

def Clear_history(history, hist_length):
    return _oscillator_bursting.Clear_history(history, hist_length)
Clear_history = _oscillator_bursting.Clear_history

def Clear_state(y, nosc_, epsilon_, frrms_):
    return _oscillator_bursting.Clear_state(y, nosc_, epsilon_, frrms_)
Clear_state = _oscillator_bursting.Clear_state

def free_vector(y, nl, nh):
    return _oscillator_bursting.free_vector(y, nl, nh)
free_vector = _oscillator_bursting.free_vector
class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _oscillator_bursting.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _oscillator_bursting.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _oscillator_bursting.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _oscillator_bursting.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _oscillator_bursting.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _oscillator_bursting.doubleArray_frompointer
    if _newclass:
        frompointer = staticmethod(_oscillator_bursting.doubleArray_frompointer)
doubleArray_swigregister = _oscillator_bursting.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _oscillator_bursting.doubleArray_frompointer(t)
doubleArray_frompointer = _oscillator_bursting.doubleArray_frompointer


def new_doubleP():
    return _oscillator_bursting.new_doubleP()
new_doubleP = _oscillator_bursting.new_doubleP

def copy_doubleP(value):
    return _oscillator_bursting.copy_doubleP(value)
copy_doubleP = _oscillator_bursting.copy_doubleP

def delete_doubleP(obj):
    return _oscillator_bursting.delete_doubleP(obj)
delete_doubleP = _oscillator_bursting.delete_doubleP

def doubleP_assign(obj, value):
    return _oscillator_bursting.doubleP_assign(obj, value)
doubleP_assign = _oscillator_bursting.doubleP_assign

def doubleP_value(obj):
    return _oscillator_bursting.doubleP_value(obj)
doubleP_value = _oscillator_bursting.doubleP_value
# This file is compatible with both classic and new-style classes.


